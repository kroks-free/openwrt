From dde4992d9e8a2fb765dd0804ce2aad7931e03c55 Mon Sep 17 00:00:00 2001
From: Kroks <dev@kroks.ru>
Date: Fri, 18 Nov 2022 13:50:29 +0300
Subject: [PATCH] phy: ralink: implement mt7628 usb calibration

---
 drivers/phy/ralink/phy-ralink-usb.c | 116 +++++++++++++++++++++++++---
 1 file changed, 105 insertions(+), 11 deletions(-)

--- a/drivers/phy/ralink/phy-ralink-usb.c
+++ b/drivers/phy/ralink/phy-ralink-usb.c
@@ -18,23 +18,43 @@
 #include <linux/platform_device.h>
 #include <linux/regmap.h>
 #include <linux/reset.h>
+#include <linux/iopoll.h>
 
 #define RT_SYSC_REG_SYSCFG1		0x014
 #define RT_SYSC_REG_CLKCFG1		0x030
 #define RT_SYSC_REG_USB_PHY_CFG		0x05c
 
 #define OFS_U2_PHY_AC0			0x800
+#define USBPLL_FBDIV_S			16
+#define BG_TRIM_S			8
+#define BG_RBSEL_S			6
+#define BG_RASEL_S			4
+#define BGR_DIV_S			2
+#define CHP_EN				BIT(1)
 #define OFS_U2_PHY_AC1			0x804
+#define VRT_VREF_SEL_S			28
+#define TERM_VREF_SEL_S			24
+#define USBPLL_RSVD			BIT(4)
+#define USBPLL_ACCEN			BIT(3)
+#define USBPLL_LF			BIT(2)
 #define OFS_U2_PHY_AC2			0x808
 #define OFS_U2_PHY_ACR0			0x810
+#define HSTX_SRCAL_EN			BIT(23)
+#define HSTX_SRCTRL_S			16
+#define HSTX_SRCTRL_M			GENMASK(18, 16)
 #define OFS_U2_PHY_ACR1			0x814
 #define OFS_U2_PHY_ACR2			0x818
 #define OFS_U2_PHY_ACR3			0x81C
+#define HSTX_DBIST_S			28
+#define HSRX_BIAS_EN_SEL_S		20
 #define OFS_U2_PHY_ACR4			0x820
 #define OFS_U2_PHY_AMON0		0x824
 #define OFS_U2_PHY_DCR0			0x860
+#define PHYD_RESERVE_S			8
+#define CDR_FILT_S			0
 #define OFS_U2_PHY_DCR1			0x864
 #define OFS_U2_PHY_DTM0			0x868
+#define FORCE_USB_CLKEN			BIT(25)
 #define OFS_U2_PHY_DTM1			0x86C
 
 #define RT_RSTCTRL_UDEV			BIT(25)
@@ -49,6 +69,18 @@
 #define USB_PHY_UTMI_8B60M		BIT(1)
 #define UDEV_WAKEUP			BIT(0)
 
+#define OFS_FM_CR0			0xf00
+#define FREQDET_EN			BIT(24)
+#define CYCLECNT_S			0
+#define CYCLECNT_M			GENMASK(23, 0)
+
+#define OFS_FM_MONR0			0xf0c
+
+#define OFS_FM_MONR1			0xf10
+#define FRCK_EN				BIT(8)
+
+#define U2_SR_COEF_7628			32
+
 struct ralink_usb_phy {
 	struct reset_control	*rstdev;
 	struct reset_control	*rsthost;
@@ -58,7 +90,7 @@ struct ralink_usb_phy {
 	struct regmap		*sysctl;
 };
 
-static void u2_phy_w32(struct ralink_usb_phy *phy, u32 val, u32 reg)
+static void u2_phy_w32(struct ralink_usb_phy *phy, u32 reg, u32 val)
 {
 	writel(val, phy->base + reg);
 }
@@ -68,24 +100,84 @@ static u32 u2_phy_r32(struct ralink_usb_
 	return readl(phy->base + reg);
 }
 
+static void u2_phy_rmw32(struct ralink_usb_phy *phy, u32 reg, u32 clr, u32 set)
+{
+	set |= u2_phy_r32(phy, reg) & ~clr;
+	u2_phy_w32(phy, reg, set);
+}
+
 static void ralink_usb_phy_init(struct ralink_usb_phy *phy)
 {
 	u2_phy_r32(phy, OFS_U2_PHY_AC2);
 	u2_phy_r32(phy, OFS_U2_PHY_ACR0);
 	u2_phy_r32(phy, OFS_U2_PHY_DCR0);
 
-	u2_phy_w32(phy, 0x00ffff02, OFS_U2_PHY_DCR0);
+	u2_phy_w32(phy, OFS_U2_PHY_DCR0,
+			   (0xffff << PHYD_RESERVE_S) | (2 << CDR_FILT_S));
 	u2_phy_r32(phy, OFS_U2_PHY_DCR0);
-	u2_phy_w32(phy, 0x00555502, OFS_U2_PHY_DCR0);
+
+	u2_phy_w32(phy, OFS_U2_PHY_DCR0,
+			   (0x5555 << PHYD_RESERVE_S) | (2 << CDR_FILT_S));
 	u2_phy_r32(phy, OFS_U2_PHY_DCR0);
-	u2_phy_w32(phy, 0x00aaaa02, OFS_U2_PHY_DCR0);
+
+	u2_phy_w32(phy, OFS_U2_PHY_DCR0,
+			   (0xaaaa << PHYD_RESERVE_S) | (2 << CDR_FILT_S));
 	u2_phy_r32(phy, OFS_U2_PHY_DCR0);
-	u2_phy_w32(phy, 0x00000402, OFS_U2_PHY_DCR0);
+
+	u2_phy_w32(phy, OFS_U2_PHY_DCR0,
+			   (4 << PHYD_RESERVE_S) | (2 << CDR_FILT_S));
 	u2_phy_r32(phy, OFS_U2_PHY_DCR0);
-	u2_phy_w32(phy, 0x0048086a, OFS_U2_PHY_AC0);
-	u2_phy_w32(phy, 0x4400001c, OFS_U2_PHY_AC1);
-	u2_phy_w32(phy, 0xc0200000, OFS_U2_PHY_ACR3);
-	u2_phy_w32(phy, 0x02000000, OFS_U2_PHY_DTM0);
+
+	u2_phy_w32(phy, OFS_U2_PHY_AC0,
+			   (0x48 << USBPLL_FBDIV_S) | (8 << BG_TRIM_S) | (1 << BG_RBSEL_S) | (2 << BG_RASEL_S) | (2 << BGR_DIV_S) | CHP_EN);
+	u2_phy_w32(phy, OFS_U2_PHY_AC1,
+			   (4 << VRT_VREF_SEL_S) | (4 << TERM_VREF_SEL_S) | USBPLL_RSVD | USBPLL_ACCEN | USBPLL_LF);
+	u2_phy_w32(phy, OFS_U2_PHY_ACR3,
+			   (12 << HSTX_DBIST_S) | (2 << HSRX_BIAS_EN_SEL_S));
+	u2_phy_w32(phy, OFS_U2_PHY_DTM0,
+			   FORCE_USB_CLKEN);
+}
+
+static void ralink_usb_phy_sr_calibrate(struct ralink_usb_phy *phy)
+{
+	u32 fmout, tmp = 4;
+
+	/* Enable HS TX SR calibration */
+	u2_phy_rmw32(phy, OFS_U2_PHY_ACR0, 0, HSTX_SRCAL_EN);
+	usleep_range(1000, 1100);
+
+	/* Enable free run clock */
+	u2_phy_rmw32(phy, OFS_FM_MONR1, 0, FRCK_EN);
+
+	/* Set cycle count = 0x400 */
+	u2_phy_rmw32(phy, OFS_FM_CR0, CYCLECNT_M, 0x400 << CYCLECNT_S);
+
+	/* Enable frequency meter */
+	u2_phy_rmw32(phy, OFS_FM_CR0, 0, FREQDET_EN);
+
+	/* Wait for FM detection done, set timeout to 10ms */
+	readl_poll_timeout(phy->base + OFS_FM_MONR0, fmout, fmout, 1000, 10 * 1000);
+
+	/* Disable frequency meter */
+	u2_phy_rmw32(phy, OFS_FM_CR0, FREQDET_EN, 0);
+
+	/* Disable free run clock */
+	u2_phy_rmw32(phy, OFS_FM_MONR1, FRCK_EN, 0);
+
+	/* Disable HS TX SR calibration */
+	u2_phy_rmw32(phy, OFS_U2_PHY_ACR0, HSTX_SRCAL_EN, 0);
+	usleep_range(1000, 1100);
+
+	if (fmout) {
+		/*
+		 * set reg = (1024 / FM_OUT) * 25 * 0.028
+		 * (round to the nearest digits)
+		 */
+		tmp = (((1024 * 25 * U2_SR_COEF_7628) / fmout) + 500) / 1000;
+	}
+
+	u2_phy_rmw32(phy, OFS_U2_PHY_ACR0, HSTX_SRCTRL_M,
+				 (tmp << HSTX_SRCTRL_S) & HSTX_SRCTRL_M);
 }
 
 static int ralink_usb_phy_power_on(struct phy *_phy)
@@ -110,10 +202,12 @@ static int ralink_usb_phy_power_on(struc
 	 * The SDK kernel had a delay of 100ms. however on device
 	 * testing showed that 10ms is enough
 	 */
-	mdelay(10);
+	usleep_range(10000, 11000);
 
-	if (phy->base)
+	if (phy->base) {
 		ralink_usb_phy_init(phy);
+		ralink_usb_phy_sr_calibrate(phy);
+	}
 
 	/* print some status info */
 	regmap_read(phy->sysctl, RT_SYSC_REG_USB_PHY_CFG, &t);
